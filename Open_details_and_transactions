/******************************************************************************

      BANKING SYSTEM !!
      
*******************************************************************************/
#include <bits/stdc++.h>
#include<ctime>
using namespace std;

unordered_set<long long>allids;


long long get_age(vector<int>&a, vector<int>&b)
{
    int pd = a[0];
    int pm = a[1];
    int py = a[2];
    
    int bd = b[0];
    int bm = b[1];
    int by = b[2];
  int d, m, y;
  int md[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
  y = py - by;
  if (pm < bm)
  {
    y--;
    m = 12 - (bm - pm);       
  }
  else
  {m = pm - bm;}
  if (pd < bd)
  {
    m--;
    d = md[pm - 1] - (bd - pd);
  }
  else
  {d = pd - bd;}
//   cout << "your age is : \n";
return y;
}
long double duration_left(vector<int>&a, vector<int>&b)
{
    int pd = a[0];
    int pm = a[1];
    int py = a[2];
    
    int bd = b[0];
    int bm = b[1];
    int by = b[2];
  long double d, m, y;
  int md[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
  y = py - by;
  if (pm < bm)
  {
    y--;
    m = 12 - (bm - pm);       
  }
  else
  {m = pm - bm;}
  if (pd < bd)
  {
    m--;
    d = md[pm - 1] - (bd - pd);
  }
  else
  {d = pd - bd;}
//   cout << "your age is : \n";
return y + m/12.0 ;
}

class Customer
{
  public:
  string name,email; 
  long long customer_id, contact_number;
  vector<string>addr;
  vector<int>DOB;
  vector<int>start_date;
  
  public:
  Customer();
 
  
  
};

vector<Customer>listofcustomers;

Customer::Customer()
 {   cout<<"Enter your name ";
      getline(cin.ignore(),name);
      cout<<"Contact details - ";
      cin>> contact_number;
      cout<<"\n";
      cout<<"Enter your address : \n";
      cout<<"STATE ? ";
      string x;
      getline(cin.ignore(),x);
      addr.push_back(x);
      cout<<"CITY ? ";
      getline(cin.ignore(),x);
      addr.push_back(x);
      
      cout<<endl;
      cout<<"Locality ? "<<endl;
      getline(cin.ignore(),x);
      addr.push_back(x);
      
      cout<<"HOUSE ? "<<endl;
      getline(cin.ignore(),x);
      addr.push_back(x);
      reverse(addr.begin(), addr.end());
      cout<<endl;
      long long r;
      cout<<"ENTER YOUR DATE OF BIRTH\n";
      cout<<"DAY? ";
      cin>>r;
      DOB.push_back(r);
      
      cout<<endl;
      cout<<"MONTH ? "<<endl;
      cin>>r;
      DOB.push_back(r);
      cout<<" YEAR ? "<<endl;
      cin>>r;
      DOB.push_back(r);
      cout<<endl;
      
      
      cout<<"What is the date today? DD MM YYYY"<<endl;
         for( int i =0; i <3; i++)
         {
             int y;
             cin>>y;
             start_date.push_back(y);
         }
         
  
     int age = get_age(start_date ,DOB);
     
     if( age < 18)
     {
         cout<<"Sorry, you are underage!"<<endl;
         return;
     }
      
      cout<<"Enter your email address "<<endl;
      cin>>email;
      
      customer_id = rand();
      while(allids.find(customer_id) != allids.end())
      {
          customer_id =  rand();
      }
      
      
    
      
      allids.insert(customer_id);
      listofcustomers.push_back(*this);
      cout<<"Your Customer Id is "<<customer_id<<endl;
      
  }

class Account
{
    public:
        long long account_number,customer_id ,balance;
        string name;
        vector<int>start_date;
        
    public:
      void add_account()
      {
         cout<<" Please enter your customer_id : ";
         cin>>customer_id;
         
         account_number = customer_id + 3*rand();
         
         cout<<"how much money you want to deposit to start with ? ";
         cin>>balance;
         
         cout<<"What is the date today? DD MM YYYY"<<endl;
         for( int i =0; i <3; i++)
         {
             int y;
             cin>>y;
             start_date.push_back(y);
         }
         
         for( auto customer : listofcustomers)
         {
            
             if( customer.customer_id == customer_id)
             {

                 name = customer.name;
             }
         }
         
      }
      
      void deleteaccount(long long number)
      {
          
      }
      
      void update_account( long long number)
      {
          
      }
    
};


class Savings_Account : public Account
{ 
    
    private:
    int cardpin;
    int cvv;
    vector<int>expiry;
    
    public:
    long long NRV,penalty_nrv;
    long double Interest_Rate;
    long long Card_number;
    
    public:
    int get_cardpin()
    {
        return cardpin;
    }
    
    int get_cardcvv()
    {
        return cvv;
    }
    vector<int> get_expiry()
    {
        return expiry;
    }
    
    
    
    Savings_Account();

    
};

vector<Savings_Account>savingaccounts;

Savings_Account::Savings_Account()
    {
        add_account();
        
        if( balance <10000)
        {
            cout<<" Your acount cannot be created as your deposit is less then 10000";
            cout<<savingaccounts.size();
            return;
        }
        NRV = 100000;
        penalty_nrv = 1000;
        Interest_Rate = 6;
        
        Card_number = customer_id + 2*rand();
        
        
        cout<<" your ATM card number is "<<Card_number;
        cout<<endl<<"please set up yout ATM pin, enter 4 digits only : ";
        cin>>cardpin;
        cvv = 100 + (rand() % 900);
        expiry = {1 + (rand() % 12) , start_date[2] + 3};
        
       
        // cout<<"the interest_rate of this is "<<(*this).Interest_Rate<<endl;
        savingaccounts.push_back(*this);
         cout<<"Your Savings Account has been setup\n";
        // cout<<((savingaccounts[0])).Interest_Rate<<endl;
        
    }




class Current_Account : public Account
{
    public :
    long long NRV=500000;
    long long penalty_nrv = 5000;
    long long age_limit = 18;
    
    public:
    Current_Account();
  
    
};

vector<Current_Account>currentaccounts;

Current_Account::Current_Account()
{
    add_account();
    int age_of_cust  = 0;
    // for( auto cust : listofcustomers )
    // {
    //     if( cust.customer_id == customer_id)
    //     {
    //       age_diff = get_age(dateandtime,cust.DOB);        
    //     }
    // }
    // if(age_of_cust < 18)
    // {
    //  cout<<"Your account cannot be setup as your age is less than 18 ";
    //     return;   
    // }
    
    
    if( balance < 100000)
    {
        cout<<"Your account cannot be setup as your deposit is less than 100000";
        return;
    }
    
    currentaccounts.push_back(*this);
     cout<<"Your Current Account has been setup\n";
    
    return;
    
}


class Loan_Account : public Account
{
    
    public:
    Loan_Account();
  
    
};

vector<Loan_Account>loanaccounts;

long long get_EMI( long long amount , long double duration, long double rate)
{
    duration *= 2;
    rate /=2;
    
    long double Amount_topay = amount*(pow((1.00 + rate/100),duration));
    cout<<Amount_topay<<endl;
    return Amount_topay/(duration*6);
}

Loan_Account::Loan_Account()
{ 
    long long EMI;
    long double rate;
    long double type ;
    add_account();
    
    vector<int>dob;
    
    for( auto cust : listofcustomers)
    {
        if( cust.customer_id  == customer_id )
        {
            dob = cust.DOB;
        }
    }
    
    long long age = get_age(start_date , dob);
    
    if( age < 25)
    {
        cout<<"You are underage for a loan! Sorry."<<endl;
        return;
    }
    if( balance < 500000)
    {
        cout<<"Cant provide loan less than 500000 ! Sorry."<<endl;
        return;
    }
    
    bool no_previous_account = true;
    long long loan_capacity = 0;
    for( auto acct : savingaccounts )
    {
        no_previous_account = false;
        loan_capacity += acct.balance;
        
    }
    
    for( auto acct : currentaccounts )
    {
        no_previous_account = false;
        loan_capacity += acct.balance;
        
    }
    
    if(no_previous_account)
    {
        cout<<"You should have at least one Savings / Current accounts for getting a loan! Sorry."<<endl;
        
        return;
        
    }
    
    
    loan_capacity  *=4;
    loan_capacity /=10;
    
    if(balance > loan_capacity)
    {
        cout<<"Cant provide loan more than 40% of your deposits ! Sorry."<<endl;
        return;
    }
    
    cout<<"What type of loan you want to take ?"<<endl;
    cout<<"HOME / CAR / PERSONAL / BUSINESS ?  1 / 2 / 3 / 4 "<<endl;
    cin>> type;
    cout<<"For what duration do you want to issue the loan in years ?"<<endl;
    
    long double duration;
    cin >> duration;
    
    if( duration < 2.0)
    {
        cout<<"Duration less than 2 years is not permitted! Sorry."<<endl;
        return;
    }
    
    if( type ==1)
    {
        rate = 7.0;
    }
    else if( type == 2)
    {
        rate  = 8.0;
    }
    
    else if( type == 3)
    {
       rate = 12.0;    
    }
    
    else
    rate = 15.0;
    
    EMI = get_EMI(balance , duration, rate);
    
    loanaccounts.push_back(*this);
    cout<<"Your account has been created"<<endl;
    return;
    
}





class Transaction
{
  public :
  long long kind,amount;
  vector<long long>description;
  vector<int>date;
  
  
  public:
  Transaction();
  
};

vector<Transaction>transactions;



int savingsorcurrent(long long &account_number )
{
            
            bool isaccount = false;
            for( auto &acct : savingaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                return 1;
               
            }
            
            for( auto &acct : currentaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                return 2;
           
            }
            
          return 0;
}

bool compare( vector<int>card, vector<int>today)
{
    if(card[1] != today[2])
    {
        return card[1]> today[2]; 
    }
    
    if(card[0] != today[1])
    {
        return card[0]> today[1]; 
    }
    
    return false;
}
pair<int,int> valid_atm_transfer(long long number,vector<int>date)
{
    for( auto acc : savingaccounts)
    {
        if(acc.Card_number == number)
        {
          if( !compare(acc.get_expiry() , date))
          {
              return {-1,-1};// card expired
          }
         int this_day = 0, this_month = 0;
          for( auto trans : transactions)
          {
              if(trans.date == date )
              {
                  this_day += trans.amount;
              }
              if(trans.date[1] == date[1] and trans.date[2] == date[2] and trans.kind == 4)
              {
                  this_month ++;
              }
          }
          
         
         return {this_day , this_month};
          
        }
        
    }
    
    return {-2,-2} ;// card doesnt exist;
}

bool valid_savings_withdraw(long long account_number, long long amount, vector<int>date)
{
    long long todays = 0;
    if(amount >20000){return false;}
    for( auto trans : transactions )
    {
        if(trans.date== date)
        {
            todays += trans.amount;
        }
        
        if(todays + amount >50000){return false;}
    }
    
    return true;
}

bool withdraw(long long &amount, long long &account_number, int x, vector<int>&date)
{

     
            if (x ==1)
           { 
               if( !valid_savings_withdraw(account_number, amount, date) )
               {
                   return false;
               }
               
               for( auto &acct : savingaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                
                acct.balance -= amount;
                
                return true;
            }
            
               
           }
           
           for( auto &acct : currentaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                long long charges = min(amount /200 ,500*1LL);
                if(acct.balance < amount + charges)
                {return false;}
                acct.balance -= amount + charges;
                acct.balance -= amount /200;
                
                return true;
            }
          
           
            
            return true;
            

}

void deposit(long long &amount, long long &account_number, int x )
{

     
            if (x ==1)
           { 
               for( auto &acct : savingaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                acct.balance += amount;
                return;
            }
            
               
           }
           
           for( auto &acct : currentaccounts)
            {
                if(acct.account_number != account_number){continue;}
                
                acct.balance += amount;
                return;
            }
          
           
            
            return;
            

}

Transaction::Transaction()
{
    
    cout<<"What type of transaction you want to perform ?"<<endl;
    
    cout<<" Deposit /  Withdraw  / Transfer / ATM transactions  ?   1 / 2 / 3 /4"<<endl;
    
    int response;
    cin>>response;
    
    switch (response)
    {
        case 1:
        { 
            long long account_number;
            cout<<"Enter your account number\n";
            cin>>account_number;
            
            date = vector<int>(3,0);
            cout<<"What is the date today ?\n";
            cin>>date[0]>>date[1]>>date[2];
            
            cout<<"Enter the amount to deposit :";
            cin>>amount;
            
            int x = savingsorcurrent(account_number);
            if(!x)
            {
                cout<<"Its not a valid S/C account";
                break;
            }
            
            deposit( amount, account_number ,x);
            
            description = {x,account_number};
            kind = 1;
            
            transactions.push_back(*this);
            
           
            break;
            
        }
        
        case 2:
        {
             long long account_number;
            cout<<"Enter your account number\n";
            cin>>account_number;
            date = vector<int>(3,0);
            cout<<"What is the date today ?/n";
            cin>>date[0]>>date[1]>>date[2];
            
            cout<<"Enter the amount to deposit :";
            cin>>amount;
            
            int x = savingsorcurrent(account_number);
            if(!x)
            {
                cout<<"Its not a valid S/C account";
                break;
            }
            
            if( !withdraw(amount, account_number, x , date))
            {
                cout<<"You cannot withdraw anymore !";
                break;
            }


            
            description = {x , account_number};
            kind = 2;
            
            transactions.push_back(*this);
      break;
        }
        
        case 3:
        {     
            
            
            cout<<"Enter your account \n";
            long long account_w, account_d;
            cin>>account_w;
            
            int type_w =savingsorcurrent(account_w);
            
            if(!type_w)
            {
                cout<<"Sorry it is not a valid S/C account\n";
                break;
            }
            
            cout<<"Enter the account to which the amount needs to be transferred\n";
            cin>>account_d;
            
            int type_d = savingsorcurrent(account_d);
            
            if(!type_w)
            {
                cout<<"Sorry it is not a valid S/C account\n";
                break;
            }
            
            cout<<"Enter the amount to be transferred\n";
            cin>>amount;
            
            if( !withdraw(amount, account_w, type_w , date))
            {
                cout<<"You cannot withdraw anymore !";
                break;
            }
            
            date = vector<int>(3,0);
            cout<<"What is the date today ?\n";
            cin>>date[0]>>date[1]>>date[2];
            
            deposit(amount, account_d, type_d);
            
            description = {type_w , (account_w), type_d, (account_d)};
            kind = 3;
            
            transactions.push_back(*this);
            
            break;
        }
        
        case 4:
        {
            cout<<"Enter your Atm number :\n";
            long long number;
            cin>>number;
            
            date = vector<int>(3,0);
            cout<<"What is the date today ?\n";
            cin>>date[0]>>date[1]>>date[2];
            
            pair<long long, long long>p= valid_atm_transfer(number,date);
            //1 . card expired
            long long val = p.first;
            if( val == -1)
            {
                cout<<"Card has expired\n";break;
            }
            
            if( val == -2)
            {
                cout<<"Card doesn't exist\n";break;
            }
            
            if( val >50000)
            {
                cout<<"Daily Limit Exceeded \n";break;
            }
            
            cout<<"Enter the amount to withdraw :\n";
            cin>>amount;
            
            if( amount >20000)
            {
                cout<<"Transaction not allowed!\n"; break;
            }
            
            int charges = 0;
            if(p.second > 0);
            charges =500;
            if( amount + val + charges > 50000)
            {
                cout<<"Daily limit will exceed!. Sorry";
            }
            
            string
            description = {(number)};
            kind  = 4;
            for( auto &acc : savingaccounts)
            {
               if(acc.Card_number == number)
               {
                   if( acc.balance < amount + charges)
                   {cout<<"Insuficient balance"; break;}
                   acc.balance -= amount + charges;
                   
                   transaction.push_back(*this);
               }
            }
            
            break;
        }
       
    }
    
    
}

int main()
{
  int t;
  cout<<"customers_in_queue : ";
  cin>>t;
  
  while( t--)
  {
      cout<<"Are you an existing customer ? Y / N "<<endl;
      char x;
      cin>>x;
     
      if( x == 'N')
      {
         Customer curr;  
        //  cout<<"Your customer id is "<< curr.customer_id<<endl<<endl;
      }
     
      cout<<" What service would you like to use ?\n"<<endl;
      cout<<" 1. Open a new account\n";
      cout<<" 2. Details of an existing account\n";
      cout<<" 3. Details of an existing user \n";
      cout<<" 4. Making a transaction\n";
      cout<<" 5. Exit"<<endl<<endl;
      int option;
      
      cin>> option;
      
      switch(option)
      {
          case 1 :
          { 
              cout<<"Which type of account you want to open ?\n";
              cout<<" Savings / Current / Loan"<<endl;
              string acc_type;
              cin>>acc_type;
              
              if( acc_type == "Savings")
              {
                  Savings_Account curr_customer;
              }
              
              else if (acc_type == "Current")
              {
                  Current_Account curr_customer;
                  
              }
              
              else
              {
                Loan_Account curr_customer;
              }
              
              
              break;
          }
          
          case 2:
          {
              cout<<"Please enter your customer-id"<<endl;
              long long id;
              cin>>id;
              vector<pair<long long, string>>customers_accounts;
              
              for( auto acct : savingaccounts )
              {
                  if(acct.customer_id == id)
                  {
                      customers_accounts.push_back({acct.account_number,"SAVINGS"});
                  }
              }
              
              for( auto acct : currentaccounts )
              {
                  if(acct.customer_id == id)
                  {
                      customers_accounts.push_back({acct.account_number,"CURRENT"});
                  }
              }
              for( auto acct : loanaccounts )
              {
                  if(acct.customer_id == id)
                  {
                      customers_accounts.push_back({acct.account_number,"LOAN"});
                  }
              }
              if( customers_accounts.size() == 0)
              {
                  cout<<"You dont have any accounts under this customer_id !";
                  break;
              }
              cout<<"You have the following accounts : "<<endl<<endl;
              for( int i = 0; i <customers_accounts.size(); i++)
              {
                  cout<< i+1 <<". "<<customers_accounts[i].first<<" "<<customers_accounts[i].second<<endl;
              }
             cout<<"Which accounts details would you like to see ? "<<endl;
             int index;
             cin>>index;
             
             while( index > customers_accounts.size())
             {
                 cout<<"please enter a valid index of account ! "<<endl;
                 cin>>index;
             }
             
              if( customers_accounts[index-1].second == "SAVINGS")
              {
                  for( auto account : savingaccounts)
                  {
                      if(account.account_number == customers_accounts[index-1].first)
                      {
                          cout<<"here are your account details"<<endl;
                          
                          cout<<" Account holder's name :  " <<account.name<<endl;
                          cout<<" Account number :  " <<account.account_number<<endl;
                          cout<<" Account Customer ID :  " <<account.customer_id<<endl;
                          cout<<" Account Balance :  " <<account.balance<<endl;
                          cout<<" Account Start Date :  ";
                          cout<<account.start_date[0]<<"/"<<account.start_date[1]<<"/"<<account.start_date[2]<<endl;
                          
                          cout<<" Card Number :  " <<account.Card_number<<endl;
                          
                      }
                  }
              }
              else  if( customers_accounts[index-1].second == "CURRENT")
              {
                  for( auto account : currentaccounts)
                  {
                      if(account.account_number == customers_accounts[index-1].first)
                      {
                          cout<<"here are your account details"<<endl;
                          
                          cout<<" Account holder's name :  " <<account.name<<endl;
                          cout<<" Account number :  " <<account.account_number<<endl;
                          cout<<" Account Customer ID :  " <<account.customer_id<<endl;
                          cout<<" Account Balance :  " <<account.balance<<endl;
                      cout<<" Account Start Date :  ";
                          cout<<account.start_date[0]<<"/"<<account.start_date[1]<<"/"<<account.start_date[2]<<endl;
                          

                          
                      }
                  }
              }
              else
              {
                  
                        for( auto account : loanaccounts)
                  {
                      if(account.account_number == customers_accounts[index-1].first)
                      {
                          cout<<"here are your account details"<<endl;
                          
                          cout<<" Account holder's name :  " <<account.name<<endl;
                          cout<<" Account number :  " <<account.account_number<<endl;
                          cout<<" Account Customer ID :  " <<account.customer_id<<endl;
                          cout<<" Account Balance :  " <<account.balance<<endl;
                          cout<<" Account Start Date :  ";
                          cout<<account.start_date[0]<<"/"<<account.start_date[1]<<"/"<<account.start_date[2]<<endl;
                          

                          
                      }
                  }
                           
                  
              }
              
              
              
              break;
          }
          
          case 3:
          {
            cout<<"Enter your customer id "<<endl;
            long long id;
            cin>>id;
            
            for( auto cust : listofcustomers)
            {
                if( cust.customer_id == id)
                {
                    cout<<" Customer's name is :"<< cust.name<<endl;
                    cout<<"Customer's email is :"<<cust.email<<endl;
                    cout<<"Customer's DOB is : ";
                    cout<<cust.DOB[0]<<"/"<<cust.DOB[1]<<"/"<<cust.DOB[2]<<endl;
                    
                    cout<<"Customer's adress is : ";
                    cout<<cust.addr[0]<<","<<cust.addr[1]<<","<<cust.addr[2]<< ","<<cust.addr[3]<<endl;
                    
                    cout<<"Customer's contact : "<<cust.contact_number<<endl;
                    
                }
            }
            break;
          }
          
          case 4:
          {
              Transaction curr_transaction();
              break;
          }
      }
      
      
      cout << "Thanks for visiting!!"<<endl<<endl;
      
  }
  
//  Customer aa;
//  Savings_Account sa;
//  Current_Account ta;
  
  
//   for( auto it : savingaccounts)
//   {
//       cout<<it.account_number<<" "<<it.balance<<endl;
//   }
  
//   for( auto it : currentaccounts)
//   {
//       cout<<it.account_number<<" "<<it.balance<<endl;
//   }
//  Transaction t;
 
 
//  for( auto it : savingaccounts)
//   {
//       cout<<it.account_number<<" "<<it.balance<<endl;
//   }
  
//   for( auto it : currentaccounts)
//   {
//       cout<<it.account_number<<" "<<it.balance<<endl;
//   }
 
 
  

  
  
}
